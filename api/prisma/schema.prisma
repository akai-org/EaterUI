generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  displayName String
  Recipe      Recipe[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  MenuItem     MenuItem[]
  ShoppingList ShoppingList[]
}

model Recipe {
  id          String  @id @default(uuid())
  name        String
  description String
  graphicURL  String?

  user        User               @relation(fields: [userId], references: [id])
  userId      String
  ingredients RecipeIngredient[]
  menuItems   MenuItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeIngredient {
  id      String @id @default(uuid())
  name    String
  amount  Float
  measure String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id       String   @id @default(uuid())
  date     DateTime
  portions Int

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingList {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime

  user        User               @relation(fields: [userId], references: [id])
  userId      String
  ingredients ShoppingListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingListItem {
  id     String  @id @default(uuid())
  name   String
  marked Boolean

  shoppingList   ShoppingList             @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
  amounts        ShoppingListItemAmount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShoppingListItemAmount {
  id      String @id @default(uuid())
  amount  Float
  measure String

  shoppingListItem   ShoppingListItem @relation(fields: [shoppingListItemId], references: [id], onDelete: Cascade)
  shoppingListItemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
